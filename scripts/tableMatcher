#!/usr/bin/env python


# data.matcher represents all the possible comparisons between perceptive modules
# data.matcher[i].common represents i-th comparison between two different perceptive modules. 
# data.matcher[i].common[0].adap. Each one of the two adapters contains n and m objects (perceived by modules on the scene)
# data.matcher[i].common[0].adap[l].obj[j]. It is the l-th object perceived characterized by the j-th feature
# data.matcher[i].common[0].adap[l].obj[j].value. They are the values of the j-th feature 

import copy
import numpy as n
import rospy

# import all the messages
from std_msgs.msg import String
from std_msgs.msg import Float32MultiArray
from sofar_multimodal.msg import adapter
from sofar_multimodal.msg import feature
from sofar_multimodal.msg import obj
from sofar_multimodal.msg import commonFeature
from sofar_multimodal.msg import selectorMatcher
from sofar_multimodal.msg import corr
from sofar_multimodal.msg import correlationTable

# import functions from correlation_functions.py
from correlation_functions import get_dist_2d
from correlation_functions import get_dist_3d
from correlation_functions import get_colour_name
from correlation_functions import get_RGB
from correlation_functions import get_HSV

def callback(data):	
	
	table_corr_unpack = correlationTable()
						
	# PARAMETER TO BE TUNED 
	"""
	alfa_2d = 0.5 # weight of 2D coordinates in the correlation function
	beta_3d = 0.5 # weight of 3D coordinates in the correlation function
	# weight of RGB in the correlation function (only one because the range is 0-255 for all of the three components)
	gamma_color_rgb = 1/255 	
	# weight of HSV value in the correlation function (3 weights because of different ranges of components)
	delta_hue = 1/360 
	delta_sat = 1/100 
	delta_value = 1/100 
	# see the formula of tanh on the documentation
	w = 20
	"""
	
	alfa_2d = rospy.get_param('alfa_2d') # weight of 2D coordinates in the correlation function
	beta_3d = rospy.get_param('beta_3d') # weight of 3D coordinates in the correlation function
	
	# weight of RGB in the correlation function (only one because the range is 0-255 for all of the three components)
	gamma_color_rgb = rospy.get_param('gamma_color_rgb')	
	
	# weight of HSV value in the correlation function (3 weights because of different ranges of components)
	delta_hue = rospy.get_param('delta_hue')
	delta_sat = rospy.get_param('delta_sat') 
	delta_value = rospy.get_param('delta_value') 
	
	# see the formula of tanh on the documentation
	w = rospy.get_param('w')
	
	rate = rospy.get_param('rate')
	
	
	for i in range(0,len(data.matcher)): # data.matcher represents all the possible comparisons between perceptive modules 
			
		mod_perc_comp1 =data.matcher[i].common[0] # compared  perceptive module 1
		mod_perc_comp2 =data.matcher[i].common[1] # compared  perceptive module 2
		
		# initialization of the table. one matrix is created for each comparison
		# n1 = number of objects perceived from the compared  perceptive module 1
		# n2 = number of objects perceived from the compared  perceptive module 2			
		# the dimension of the matrix (table) is nxm. 			
		
		n1 = len(mod_perc_comp1.adap)
		n2 = len(mod_perc_comp2.adap)
		
		n_commonFeature = len(mod_perc_comp1.adap[0].obj)
		
		table = Float32MultiArray()			
		table = n.zeros((n1,n2))
		
		#print(table)			
		#print(n1)
		#print(n2)
		
		id_perc1 = mod_perc_comp1.id_mod    # id of the compared perceptive module 1
		id_perc2 = mod_perc_comp2.id_mod	# id of the compared perceptive module 2		
				
		# id_tot represents a unique identifier for each object from the compared perceptive modules.
		# It is a string composed by the identifier of the compared perceptive module and the identifier of the object itself
		id_tot1=list() 
		id_tot2=list()		
		
		#print(n_commonFeature)
		
		# flag set to 1 if one common_feature is not recognized
		flag = 0;
		
		for j in range(0,n_commonFeature):
			
			feature_name = mod_perc_comp1.adap[0].obj[j].name
			
			# the feature "id" of the object is always present				
			if 	(feature_name == 'id'):
													
				for l in range(0,n1):					
					id_tot1.append(str(id_perc1)+str(mod_perc_comp1.adap[l].obj[j].value)[2:-2]) 											
				
				for k in range(0,n2):					
					id_tot2.append(str(id_perc2)+str(mod_perc_comp2.adap[k].obj[j].value)[2:-2])										
			
			#print(id_tot1)		 
			#print(id_tot2)
			
			# call the function in correspondence to a particular feature.
			elif (feature_name == 'pose_2d'):									
				get_dist_2d(mod_perc_comp1,mod_perc_comp2,table,alfa_2d,j)			
			elif (feature_name == 'pose_3d'):
				get_dist_3d(mod_perc_comp1,mod_perc_comp2,table,beta_3d,j)
			elif (feature_name == 'color_name'):
				original_table = copy.copy(table)					
				err = get_colour_name(mod_perc_comp1,mod_perc_comp2,table,gamma_color_rgb,j)
				if (err == -1):
					flag = 	flag +1
					table = original_table 							
			elif (feature_name == 'color_rgb'):
				get_RGB(mod_perc_comp1,mod_perc_comp2,table,gamma_color_rgb,j)							
			elif (feature_name == 'colour_hsv'):
				get_HSV(mod_perc_comp1,mod_perc_comp2,table,delta_hue,delta_sat,delta_value,j)				
			else:
				print ("ATTENTION: NOT RECOGNIZED FEATURE '" + feature_name + "' PLEASE IMPLEMENT METHOD")				
				flag = flag +1					
				#rospy.signal_shutdown("Feature not recognized")	
			
		# PRINT VARIABLES TO TEST VALUES
		#print()				
		#print(table)			
					
		if (n_commonFeature - flag == 1):					
			continue 
		
		# SEE DOCUMENTATION FOR THE FORMULA IN ORDER TO EVALUATE table_corr
		table = - table/w
		#print()				
		#print(table)
		
		table_corr = n.tanh(table)+1
		
		print()				
		print(table_corr)
		
		# performed for each table	
		unpackaging(id_tot1,id_tot2,table_corr,table_corr_unpack)
	
	# PRINT VARIABLES TO TEST VALUES
	#print(id_tot1)		 
	#print(id_tot2)
	#print(table_corr)
	#print(table_corr_unpack)	
	
	# send to the reasoner the table_corr_unpack 
	print()				
	print('COMPUTING TABLES PROCESS FINISHED')
	#print()				
	#print(table_corr_unpack)
	
	pub=rospy.Publisher('correlationTables',correlationTable, queue_size=1)
	rate=rospy.Rate(rate)
	pub.publish(table_corr_unpack)
		

# unpackaging function creates a msg of type corr() for each cell of the table. the message corr() contains:
# - id of the i-th percepted object from the compared perceptive module 1 (first_percepted_object)
# - id of the j-th percepted object from the compared perceptive module 2 (second_percepted_object)
# - the correlation value corresponding to the position [i][j] of the table

def unpackaging(id_tot1,id_tot2,table_corr,table_corr_unpack):		
	for i in range(0,len(id_tot1)):
		for j in range(0,len(id_tot2)):
			single_corr = corr()
			single_corr.first_percepted_object = id_tot1[i]
			single_corr.second_percepted_object = id_tot2[j]
			single_corr.correlation = table_corr[i][j]
			table_corr_unpack.table.append(single_corr)	

def listener():
    
    rospy.init_node('table', anonymous=True, disable_signals= True)
    rospy.Subscriber('/featureScheduler/pubIntersection', selectorMatcher, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()
  



